// TRANSITION
@mixin trs($tRs: all) {
	-webkit-transition: $tRs 0.3s ease-in-out;
	-moz-transition: $tRs 0.3s ease-in-out;
	transition: $tRs 0.3s ease-in-out;
}

// FONT FACE
@mixin font-face($font-name, $path, $weight: normal, $style: normal, $font-display: swap) {
	@font-face {
		font-family: quote($font-name);
		src: url(../fonts/#{$path}.woff2) format('woff2'),
		url(../fonts/#{$path}.woff) format('woff');
		font-weight: $weight;
		font-style: $style;
		font-display: $font-display;
	}
}

// MATH PERCENT
@function mp($val1, $val2) {
	@return math.percentage(math.div($val1, $val2));
}

// FON SIZE IN REM
@function fsz($val1, $val2) {
	@return math.div($val1, $val2)+rem;
}

// CLEARFIX
@mixin clearfix {

	&:before,
	&:after {
		content: '';
		display: table;
	}

	&:after {
		clear: both;
	}
}

// PLACEHOLDER
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;

		&:focus {
			color: transparent;
		}
	}

	&:-moz-placeholder {
		@content;

		&:focus {
			color: transparent;
		}
	}

	&::-moz-placeholder {
		@content;

		&:focus {
			color: transparent;
		}
	}

	&:-ms-input-placeholder {
		@content;

		&:focus {
			color: transparent;
		}
	}
}

// TABLE LIST
@mixin tl {
	display: table;
	width: 100%;
	font-size: 0;
	table-layout: fixed;
}

// IMG STYLES
@mixin imgSt() {
	height: 100%;
	min-width: 100%;
	object-fit: cover;
	// object-position: 0 0;
}

@mixin imgSt1() {
	height: 100%;
	min-width: 100%;
	object-fit: cover;
	object-position: 50% 0;
}

// SET RGBA COLOR
@function percent-to-number($val) {
	@return $val / 100;
}

@function set-opacity($color) {
	$lightness: lightness($color);
	$lightness-number: percent-to-number($lightness);
	$trans-value: transparentize($color, $lightness-number);
	@return $trans-value;
}

// HORIZONTAL JUSTIFY
@mixin ha() {
	text-align: justify;
	line-height: 0;
	font-size: 1px;

	&:after {
		content: '';
		width: 100%;
		height: 0px;
		visibility: hidden;
		overflow: hidden;
		display: inline-block;
	}
}

// VERTICAL JUSTIFY
@mixin va() {
	&:after {
		content: '';
		display: inline-block;
		vertical-align: middle;
		height: 100%;
		width: 0;
	}
}

// TRANSITION
@mixin trs($tRs: all) {
	transition: color 0.3s ease-in-out, background-color 0.3s ease-in-out, opacity 0.3s ease-in-out;
}

@mixin trs1($tRs: all) {
	transition: color 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275),
		background-color 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275),
		opacity 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

@mixin trs-all($tRs: all) {
	transition: all 0.3s ease-in-out;
}

// FLEXBOX
/* Flex display */
@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

/* Flexbox Direction
   Values: row | row-reverse | column | column-reverse
   Default: row
*/
@mixin flex-direction($value: row) {
	@if $value ==row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	}

	@else if $value ==column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	}

	@else if $value ==column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	}

	@else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}

	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($args...) {
	@include flex-direction($args...);
}

/* Flexbox Wrap
   Values: nowrap | wrap | wrap-reverse
   Default: nowrap
*/
@mixin flex-wrap($value: nowrap) {
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;

	@if $value ==nowrap {
		-ms-flex-wrap: none;
	}

	@else {
		-ms-flex-wrap: $value;
	}

	flex-wrap: $value;
}

/* Flexbox Flow
   Values: <flex-direction> | <flex-wrap>
   Default: row nowrap
*/
@mixin flex-flow($values: (row nowrap,
	)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

/* Flex Order
   Default: 0
*/
@mixin flex-order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-moz-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

/* Flexbox Grow
   Default: 0
*/
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

/* Flexbox Shrink
   Default: 1
*/
@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

/* Flexbox Basis
   Default: auto
*/
@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

/* Flexbox "Flex" (shorthand)
   Values: none | <flex-grow> <flex-shrink> || <flex-basis>
   Default: See individual properties (0 1 0).
*/
@mixin flex($fg: 1, $fs: null, $fb: null) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg)=='list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

/* Flexbox Justify Content
   Values: flex-start | flex-end | center | space-between | space-around
   Default: flex-start
*/
@mixin justify-content($value: flex-start) {
	@if $value ==flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	}

	@else if $value ==flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	}

	@else if $value ==space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	}

	@else if $value ==space-around {
		-ms-flex-pack: distribute;
	}

	@else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}

	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) {
	@include justify-content($args...);
}

/* Flexbox Align Items
   Values: flex-start | flex-end | center | baseline | stretch
   Default: stretch
*/
@mixin align-items($value: stretch) {
	@if $value ==flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	}

	@else if $value ==flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	}

	@else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}

	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

/* Flexbox Align Self
   Values: auto | flex-start | flex-end | center | baseline | stretch
   Default: auto
*/
@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;

	@if $value ==flex-start {
		-ms-flex-item-align: start;
	}

	@else if $value ==flex-end {
		-ms-flex-item-align: end;
	}

	@else {
		-ms-flex-item-align: $value;
	}

	align-self: $value;
}

/* Flexbox Align Content
   Values: flex-start | flex-end | center | space-between | space-around | stretch
   Default: stretch
*/
@mixin align-content($value: stretch) {
	-webkit-align-content: $value;
	-moz-align-content: $value;

	@if $value ==flex-start {
		-ms-flex-line-pack: start;
	}

	@else if $value ==flex-end {
		-ms-flex-line-pack: end;
	}

	@else {
		-ms-flex-line-pack: $value;
	}

	align-content: $value;
}
